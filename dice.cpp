using namespace std;
#include "dice.h"
#include <cmath>
#include <stdexcept>

Dice::Dice(){
	faces = 6;
	points = {
		{-0.5f,-0.5f,-0.5f},
		{0.5f,-0.5f,-0.5f},
		{-0.5f,0.5f,-0.5f},
		{-0.5f,-0.5f,0.5f},
		{0.5f,0.5f,-0.5f},
		{0.5f,-0.5f,0.5f},
		{-0.5f,0.5f,0.5f},
		{0.5f,0.5f,0.5f}
	};
}

Dice::Dice(int f){
	faces = f;
    switch (f) {
        case 4:  // d4
            points = {
                { -0.5f, sqrt(3)/4.0f, 0.0f },
                {  0.5f, sqrt(3)/4.0f, 0.0f },
                {  0.0f, sqrt(3)/4.0f, sqrt(3)/2.0f },
                {  0.0f, sqrt(3)/4.0f - sqrt(6)/3.0f, sqrt(3)/6.0f }
            };
            break;
        case 6:  // d6
        	faces = 6;
			points = {
				{-0.5f,-0.5f,-0.5f},
				{0.5f,-0.5f,-0.5f},
				{-0.5f,0.5f,-0.5f},
				{-0.5f,-0.5f,0.5f},
				{0.5f,0.5f,-0.5f},
				{0.5f,-0.5f,0.5f},
				{-0.5f,0.5f,0.5f},
				{0.5f,0.5f,0.5f}
			};
			break;
		case 8:  // d8
            points = {
                { -0.5f, -sqrt(2)/4.0f, -sqrt(2)/4.0f },
                {  0.5f, -sqrt(2)/4.0f, -sqrt(2)/4.0f },
                { -0.5f,  sqrt(2)/4.0f,  sqrt(2)/4.0f },
                {  0.5f,  sqrt(2)/4.0f,  sqrt(2)/4.0f },
                {  0.0f,  0.5f, -0.5f },
                {  0.0f, -0.5f,  0.5f }
            };
            break;

        case 10:  // d10
            points = {
                { -0.95f, -0.649f, 1.155f },
                {  0.0f, -1.155f, 1.153f },
                {  0.95f, -0.649f, 1.155f },
                {  1.54f, -0.465f, 0.271f },
                {  1.54f, 0.465f, -0.271f },
                {  0.95f, 0.649f, -1.155f },
                {  0.0f, 1.149f, -1.146f },
                { -0.95f, 0.649f, -1.155f },
                { -1.54f, 0.465f, -0.271f },
                { -1.54f, -0.465f, 0.271f },
                {  0.0f, 1.489f, 1.164f },
                {  0.0f, -1.489f, -1.164f }
            };
            break;

        case 12:  // d12
            points = {
                { -0.5f, -0.77f, 0.0f },
                {  0.5f, -0.77f, 0.0f },
                {  0.81f, 0.18f, 0.0f },
                {  0.0f, 0.77f, 0.0f },
                { -0.81f, 0.18f, 0.0f },
                { -0.81f, -1.2f, 0.85f },
                {  0.0f, -1.46f, 1.38f },
                {  0.81f, -1.19f, 0.85f },
                {  1.31f, -0.51f, 1.38f },
                {  1.31f, 0.34f, 0.85f },
                {  0.81f, 1.03f, 1.38f },
                {  0.0f, 1.29f, 0.85f },
                { -0.81f, 1.03f, 1.38f },
                { -1.31f, 0.34f, 0.85f },
                { -1.31f, -0.51f, 1.38f },
                {  0.0f, -0.93f, 2.23f },
                {  0.81f, -0.34f, 2.23f },
                {  0.5f, 0.61f, 2.23f },
                { -0.5f, 0.61f, 2.23f },
                { -0.81f, -0.35f, 2.23f }
            };
            break;

        case 20:  // d20
            points = {
                { 0.5f, 0.43f, 0.0f },
                { -0.5f, 0.43f, 0.0f },
                { 0.0f, -0.43f, 0.0f },
                { 0.0f, 1.08f, 0.58f },
                { -0.81f, -0.32f, 0.58f },
                { 0.81f, -0.32f, 0.58f },
                { 0.81f, 0.61f, 0.93f },
                { -0.81f, 0.61f, 0.93f },
                { 0.0f, -0.79f, 0.93f },
                { 0.0f, 0.72f, 1.51f },
                { -0.5f, -0.14f, 1.51f },
                { 0.5f, -0.14f, 1.51f }
            };
            break;

        default:
            throw invalid_argument("Unsupported dice type");
    }
}
