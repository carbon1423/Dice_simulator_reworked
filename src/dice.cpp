using namespace std;
#include "dice.h"
#include <cmath>
#include <stdexcept>

Dice::Dice(){
	faces = 6;
	points = {
		{-0.5f,-0.5f,-0.5f},
		{0.5f,-0.5f,-0.5f},
		{-0.5f,0.5f,-0.5f},
		{-0.5f,-0.5f,0.5f},
		{0.5f,0.5f,-0.5f},
		{0.5f,-0.5f,0.5f},
		{-0.5f,0.5f,0.5f},
		{0.5f,0.5f,0.5f}
	};
}

Dice::Dice(int f){
	faces = f;
    /*
    In this constructor we determine how many faces the dice will have based on f
    we then use this to define the points
    and we also define the triangles (the indices of points that make up each face)*/
    switch (f) {
        case 4:  // d4
            points = {
                { 0.0f, 1.0f, 0.0f },
                {  sqrt(3.0f)/2.0f, -0.5f, 0.0f },
                {  -sqrt(3.0f)/2.0f, -0.5f, 0.0f },
                {  0.0f, 0.0f, 1.41f }
            };
            triangles = {
                {0, 1, 2},
                {2, 1, 3},
                {0, 2, 3},
                {1, 0, 3}
            };
            break;
        case 6:  // d6
        	faces = 6;
			points = {
				{-0.5f,-0.5f,-0.5f},
				{0.5f,-0.5f,-0.5f},
				{-0.5f,0.5f,-0.5f},
				{-0.5f,-0.5f,0.5f},
				{0.5f,0.5f,-0.5f},
				{0.5f,-0.5f,0.5f},
				{-0.5f,0.5f,0.5f},
				{0.5f,0.5f,0.5f}
			};
            triangles = {
                // Front face (+Z)
                {3, 5, 7},
                {3, 7, 6},
                // Back face (-Z)
                {0, 2, 4},
                {0, 4, 1},
                // Left face (-X)
                {0, 3, 6},
                {0, 6, 2},
                // Right face (+X)
                {1, 4, 7},
                {1, 7, 5},
                // Top face (+Y)
                {2, 6, 7},
                {2, 7, 4},
                // Bottom face (-Y)
                {0, 1, 5},
                {0, 5, 3}
            };
			break;
		case 8:  // d8
            points = {
                { 0.211325f, -0.788675f,  0.000000f }, // v0
                {-0.211325f,  0.788675f,  1.154701f }, // v1
                {-0.788675f,  0.211325f,  0.000000f }, // v2
                { 0.788675f, -0.211325f,  1.154701f }, // v3
                { 0.577350f,  0.577350f,  0.000000f }, // v4
                {-0.577350f, -0.577350f,  1.154701f }  // v5
            };
            triangles = {
                {0, 2, 4}, {2, 1, 4}, {1, 3, 4}, {3, 0, 4}, // top half
                {0, 5, 2}, {2, 5, 1}, {1, 5, 3}, {3, 5, 0}  // bottom half
            };
            
            break;

        case 10:  // d10
            points = {
                {-0.95,-0.649,1.155},
                {0,-1.155,1.153},
                {.95,-.649,1.155},
                {1.54,-.465,.271},
                {1.54,.465,-.271},
                {.95,.649,-1.155},
                {0,1.149,-1.146},
                {-.95,.649,-1.155},
                {-1.54,.465,-.271},
                {-1.54,-.465,.271},
                {0,1.489,1.164},
                {0,-1.489,-1.164}
            };
            
            triangles = {
                {0, 1, 10},
                {0, 9, 1},
                {0, 10, 9},
            
                {1, 2, 10},
                {1, 3, 2},
            
                {1, 9, 11},
                {1, 11, 3},
            
                {2, 3, 10},
                {3, 4, 10},
                {3, 11, 4},
            
                {4, 5, 10},
                {4, 11, 5},
            
                {5, 6, 10},
                {5, 7, 6},
                {5, 11, 7},
            
                {6, 7, 10},
                {7, 8, 10},
                {7, 11, 8},
            
                {8, 9, 10},
                {8, 11, 9}
            };
            
            break;

        case 12:  // d12
            points = {
                { -0.5f, -0.77f, 0.0f },
                {  0.5f, -0.77f, 0.0f },
                {  0.81f, 0.18f, 0.0f },
                {  0.0f, 0.77f, 0.0f },
                { -0.81f, 0.18f, 0.0f },
                { -0.81f, -1.2f, 0.85f },
                {  0.0f, -1.46f, 1.38f },
                {  0.81f, -1.19f, 0.85f },
                {  1.31f, -0.51f, 1.38f },
                {  1.31f, 0.34f, 0.85f },
                {  0.81f, 1.03f, 1.38f },
                {  0.0f, 1.29f, 0.85f },
                { -0.81f, 1.03f, 1.38f },
                { -1.31f, 0.34f, 0.85f },
                { -1.31f, -0.51f, 1.38f },
                {  0.0f, -0.93f, 2.23f },
                {  0.81f, -0.34f, 2.23f },
                {  0.5f, 0.61f, 2.23f },
                { -0.5f, 0.61f, 2.23f },
                { -0.81f, -0.35f, 2.23f }
            };
            triangles = {
                // bottom pentagon (0–4)
                {1,0,2}, {2,0,3}, {3,0,4},
            
                // ring faces around bottom
                {0,6,5}, {0,1,6}, {6,1,7},
                {7,1,8}, {8,1,2}, {8,2,9},
                {9,2,10}, {10,2,3}, {10,3,11},
                {11,3,12}, {12,3,4}, {12,4,13},
                {13,4,14}, {14,4,5}, {4,0,5},
            
                // top ring to apex faces
                {14,5,15}, {19,14,15}, {13,14,19},
                {18,13,19}, {12,13,18}, {17,12,18},
                {11,12,17}, {10,11,17}, {16,10,17},
                {9,10,16}, {8,9,16}, {7,8,16},
                {7,16,15}, {6,7,15}, {5,6,15},
            
                // top cap (15–19)
                {15,18,19}, {15,17,18}, {15,16,17}
            };
            
            break;

        case 20:  // d20
            points = {
                { 0.459081f,  0.333537f, 0.000000f },   // rotated v0
                { 0.076798f, -0.562229f, 0.000000f },   // rotated v1
                {-0.510982f,  0.246791f, -0.000000f },  // rotated v2
                {-0.059059f,  0.957084f, 0.539683f },
                { 0.808018f,  0.587045f, 0.873220f },
                { 0.891985f, -0.351947f, 0.539677f },
                {-0.808018f, -0.587045f, 0.773592f },
                {-0.891985f,  0.351947f, 1.107136f },
                {-0.076798f,  0.562229f, 1.646813f },
                { 0.510982f, -0.246791f, 1.646813f },
                { 0.059059f, -0.957084f, 1.107130f },
                {-0.459081f, -0.333537f, 1.646813f }
            };
            triangles = {
                {0,1,2}, {0,2,3}, {0,3,4}, {0,4,5}, {0,5,1},
                {11,7,6}, {11,8,7}, {11,9,8}, {11,10,9}, {11,6,10},
                {1,6,2}, {2,7,3}, {3,8,4}, {4,9,5}, {5,10,1},
                {6,1,10}, {7,2,6}, {8,3,7}, {9,4,8}, {10,5,9}
            };
            break;

        default:
            throw invalid_argument("Unsupported dice type");
    }
}

const vector<glm::vec3>& Dice::get_points() const {
    return points;
}

const vector<Triangle>& Dice::get_triangles() const {
    return triangles;
}   
